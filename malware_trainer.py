import pandas as pd
import numpy as np
import pickle
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# --- Configuration ---
MODEL_FILENAME = 'rf_model.pkl'
FEATURE_FILENAME = 'model_features.pkl'

print("--- SISTC Malware Detector Trainer Initiated ---")

# Step 1: Load the dataset using a RELATIVE PATH
try:
    # Use the file name directly as we are running from the same directory
    df = pd.read_csv('top_1000_pe_imports.csv') 
    print(f"Dataset loaded successfully. Shape: {df.shape}")
except FileNotFoundError:
    print("\nFATAL ERROR: 'top_1000_pe_imports.csv' not found.")
    print("Please ensure the dataset file is in the same directory as 'malware_trainer.py'.")
    exit(1)

# Step 2: Data Preparation
# FIX: Changed 'is_malware' to the correct column name, 'malware'
X = df.drop(columns=['hash', 'malware'])
y = df['malware']
feature_names = list(X.columns)
print(f"Prepared {len(feature_names)} features for training.")

# Step 3: Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Step 4: Initialize and Train the Model with Optimal Parameters
print("Starting Random Forest Model Training (Optimized Parameters)...")
# Using the optimal parameters determined in your previous run:
rf_model = RandomForestClassifier(
    n_estimators=200, 
    max_depth=None, # equivalent to unlimited depth
    min_samples_split=2, 
    random_state=42, 
    n_jobs=-1
)
rf_model.fit(X_train, y_train)
print("Training complete.")

# Step 5: Evaluate the Model (Optional, for verification)
y_pred = rf_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\n--- Evaluation Results ---")
print(f"Test Accuracy: {accuracy:.4f}")

# Step 6: Save the Trained Model (MANDATORY STEP)
try:
    with open(MODEL_FILENAME, 'wb') as f:
        pickle.dump(rf_model, f)
    print(f"\nSUCCESS: Model saved to '{MODEL_FILENAME}'")
except Exception as e:
    print(f"ERROR: Could not save model file: {e}")

# Step 7: Save the Feature List (MANDATORY STEP)
try:
    with open(FEATURE_FILENAME, 'wb') as f:
        pickle.dump(feature_names, f)
    print(f"SUCCESS: Feature list saved to '{FEATURE_FILENAME}'")
except Exception as e:
    print(f"ERROR: Could not save feature list file: {e}")

print("\n--- Trainer execution finished. Ready to run 'app.py' ---")
